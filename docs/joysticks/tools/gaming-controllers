#!/usr/bin/env python3
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# flake8: noqa: E501

"""
Usage:
    This script detects a connected PS4, PS5, PS VR Aim, Gembird, or Nintendo Switch Pro controller,
    tracks inputs, and controls features such as motor vibration for supported controllers.
    It ensures that the vss-dbus service is not running to avoid conflicts with the joystick device.

    Ensure the vss-dbus service is stopped before running this tool:
        sudo systemctl stop vss-dbus

    To run this script with proper permissions:
        sudo ./joystick_controller.py

    Supported controllers:
    - PS4 (DualShock 4)
    - PS5 (DualSense)
    - PS VR Aim Controller (input tracking only; vibration not supported)
    - Gembird/PXN
    - Nintendo Switch Pro Controller
"""

import os
import sys
import signal
import pygame
import pydualsense  # For PS5 DualSense controller


class JoystickController:
    AXIS_THRESHOLD = 0.05  # Threshold to avoid small fluctuations

    def __init__(self):
        self.last_button_states = []
        self.last_axis_states = []
        self.last_hat_states = []
        self.last_button_10_state = False
        self.is_motor_vibrating = False
        self.joystick = None
        self.controller_type = None
        self.ds = None  # For PS5 DualSense
        signal.signal(signal.SIGINT, self.exit_gracefully)  # Handle Ctrl+C

    def check_sudo(self):
        """Checks if the script is run with sudo."""
        if os.geteuid() != 0:
            print("Error: This tool requires sudo to run.")
            sys.exit(1)

    def check_vss_dbus_service(self):
        """Checks if vss-dbus service is running."""
        service_status = os.system("systemctl is-active --quiet vss-dbus")
        if service_status == 0:
            print("Error: vss-dbus service is running. This tool might conflict with the service as the joystick device might be in use.")
            print("Please stop the vss-dbus service and run the tool again.")
            sys.exit(1)

    def initialize_controller(self):
        """Initializes Pygame and detects supported controllers."""
        pygame.init()
        pygame.joystick.init()

        if pygame.joystick.get_count() == 0:
            print("No controller detected. Please connect your controller.")
            sys.exit()

        # Initialize joystick
        self.joystick = pygame.joystick.Joystick(0)
        self.joystick.init()
        controller_name = self.joystick.get_name()
        print(f"Detected controller: {controller_name}")

        if "DualSense" in controller_name:
            self.controller_type = "PS5"
            self.initialize_ps5_controller()
        elif "Wireless Controller" in controller_name or "DualShock" in controller_name:
            self.controller_type = "PS4"
            self.initialize_ps4_controller()
        elif "PS VR Aim Controller" in controller_name:
            self.controller_type = "PSVR"
            self.initialize_psvr_controller()
        elif "PC Game Controller" in controller_name or self.joystick.get_id() == (0x11ff, 0x3331):
            self.controller_type = "Gembird"
            self.initialize_gembird_controller()
        elif "Pro Controller" in controller_name:
            self.controller_type = "Nintendo"
            self.initialize_nintendo_controller()
        else:
            print(f"Unsupported controller: {controller_name}")
            sys.exit(1)

        # Initialize tracking of buttons, axes, and hats
        self.last_button_states = [False] * self.joystick.get_numbuttons()
        self.last_axis_states = [0.0] * self.joystick.get_numaxes()
        self.last_hat_states = [(0, 0)] * self.joystick.get_numhats()

    def initialize_ps5_controller(self):
        """Initializes the PS5 DualSense controller features."""
        print("Initializing PS5 DualSense controller features.")
        self.ds = pydualsense.pydualsense()
        self.ds.init()

    def initialize_ps4_controller(self):
        """Initializes the PS4 DualShock 4 controller features."""
        print("Initializing PS4 DualShock 4 controller features.")

    def initialize_psvr_controller(self):
        """Initializes the PS VR Aim controller features."""
        print("Initializing PS VR Aim Controller features.")

    def initialize_gembird_controller(self):
        """Initializes the Gembird PC Game Controller."""
        print("Initializing Gembird PC Game Controller features.")
        # Custom handling for Gembird controller can be added here, if needed.

    def initialize_nintendo_controller(self):
        """Initializes the Nintendo Switch Pro Controller."""
        print("Initializing Nintendo Switch Pro Controller features.")
        # Custom handling for Nintendo Switch Pro Controller can be added here if needed.

    def handle_vibration_with_button_10(self):
        """Handles motor vibration with Button 10 (Options button) for supported controllers."""
        button_10_state = self.joystick.get_button(10)  # Button 10 (Options button)

        if button_10_state != self.last_button_10_state:
            if button_10_state:
                if not self.is_motor_vibrating:
                    print("Starting motor vibration with Button 10")
                    if self.controller_type == "PS5":
                        self.ds.setLeftMotor(255)  # Max power to left motor
                        self.ds.setRightMotor(255)  # Max power to right motor
                    elif self.controller_type == "PS4":
                        self.joystick.rumble(1.0, 1.0, 0)  # Start PS4 rumble with infinite duration
                    elif self.controller_type == "PSVR":
                        print("Vibration support for PS VR Aim is not implemented.")
                    elif self.controller_type == "Nintendo":
                        print("Vibration support for Nintendo Switch Pro is not implemented.")
                    self.is_motor_vibrating = True
                else:
                    print("Stopping motor vibration with Button 10")
                    if self.controller_type == "PS5":
                        self.ds.setLeftMotor(0)
                        self.ds.setRightMotor(0)
                    elif self.controller_type == "PS4":
                        self.joystick.rumble(0, 0, 0)  # Stop PS4 rumble
                    self.is_motor_vibrating = False
            self.last_button_10_state = button_10_state

        # Continuously apply vibration while it is enabled
        if self.is_motor_vibrating and self.controller_type == "PS4":
            self.joystick.rumble(1.0, 1.0, 0)  # Refresh PS4 rumble for continuous effect

    def log_inputs(self):
        """Logs button and analog inputs for the controller."""
        print(f"Controller has {self.joystick.get_numbuttons()} buttons, {self.joystick.get_numaxes()} axes, {self.joystick.get_numhats()} hats (D-pad)")

        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False

                # Handle button presses and releases
                for button_idx in range(self.joystick.get_numbuttons()):
                    button_state = self.joystick.get_button(button_idx)
                    if button_state != self.last_button_states[button_idx]:
                        if button_state:
                            print(f"Button {button_idx} pressed")
                        else:
                            print(f"Button {button_idx} released")
                        self.last_button_states[button_idx] = button_state

                # Handle axis (analog stick and trigger) movements with threshold
                for axis_idx in range(self.joystick.get_numaxes()):
                    axis_value = self.joystick.get_axis(axis_idx)
                    if abs(axis_value - self.last_axis_states[axis_idx]) > self.AXIS_THRESHOLD:
                        print(f"Axis {axis_idx} moved to {axis_value:.3f}")
                        self.last_axis_states[axis_idx] = axis_value

                # Handle hat (D-pad) movements
                for hat_idx in range(self.joystick.get_numhats()):
                    hat_value = self.joystick.get_hat(hat_idx)
                    if hat_value != self.last_hat_states[hat_idx]:
                        print(f"Hat {hat_idx} moved to {hat_value}")
                        self.last_hat_states[hat_idx] = hat_value

            # Handle vibration via Button 10
            self.handle_vibration_with_button_10()

    def quit(self):
        """Quits Pygame and pydualsense if PS5 controller is used."""
        pygame.quit()
        if self.controller_type == "PS5":
            self.ds.close()

    def exit_gracefully(self, signum, frame):
        """Handles graceful exit on Ctrl+C."""
        print("\nExiting...")
        self.quit()  # Clean up and exit
        sys.exit(0)


if __name__ == "__main__":
    controller = JoystickController()
    controller.check_sudo()              # Ensure script is run with sudo
    controller.check_vss_dbus_service()  # Ensure vss-dbus is not running
    controller.initialize_controller()   # Initialize joystick
    controller.log_inputs()              # Start logging inputs
    controller.quit()                    # Clean up when done
