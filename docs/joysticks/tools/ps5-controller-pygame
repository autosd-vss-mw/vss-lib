#!/usr/bin/env python3
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Usage: 
    This script detects a connected PS5 controller, tracks inputs, and controls DualSense 
    features such as motor vibration. It ensures that the vss-dbus service is not running 
    to avoid conflicts with the joystick device.

    Ensure the vss-dbus service is stopped before running this tool:
        sudo systemctl stop vss-dbus

    To run this script with proper permissions:
        sudo ./joystick_controller.py
"""

import os
import sys
import pygame
import pydualsense

class JoystickController:
    AXIS_THRESHOLD = 0.05  # Threshold to avoid small fluctuations

    def __init__(self):
        self.last_button_states = []
        self.last_axis_states = []
        self.last_hat_states = []
        self.last_button_10_state = False
        self.last_microphone_button_state = False
        self.is_motor_vibrating = False
        self.joystick = None
        self.ds = None

    def check_sudo(self):
        """Checks if the script is run with sudo."""
        if os.geteuid() != 0:
            print("Error: This tool requires sudo to run.")
            sys.exit(1)

    def check_vss_dbus_service(self):
        """Checks if vss-dbus service is running."""
        service_status = os.system("systemctl is-active --quiet vss-dbus")
        if service_status == 0:
            print("Error: vss-dbus service is running. This tool might conflict with the service as the joystick device might be in use.")
            print("Please stop the vss-dbus service and run the tool again.")
            sys.exit(1)  # Exit the script with an error code

    def initialize_controller(self):
        """Initializes Pygame and pydualsense for PS5 controller."""
        # Initialize Pygame and joystick
        pygame.init()
        pygame.joystick.init()

        if pygame.joystick.get_count() == 0:
            print("No controller detected. Please connect your PS5 controller.")
            sys.exit()

        # Initialize joystick
        self.joystick = pygame.joystick.Joystick(0)  # Assuming PS5 controller is the first joystick
        self.joystick.init()
        print(f"Detected controller: {self.joystick.get_name()}")

        # Initialize pydualsense
        self.ds = pydualsense.pydualsense()
        self.ds.init()
        print(dir(self.ds.state))  # Debug available attributes in DSState

        # Initialize tracking of buttons, axes, and hats
        self.last_button_states = [False] * self.joystick.get_numbuttons()
        self.last_axis_states = [0.0] * self.joystick.get_numaxes()
        self.last_hat_states = [(0, 0)] * self.joystick.get_numhats()

    def handle_dualsense_features(self):
        """Handles special DualSense features that Pygame cannot manage."""
        button_10_state = self.joystick.get_button(10)  # Button 10 (Options button)

        if button_10_state != self.last_button_10_state:
            if button_10_state:
                if not self.is_motor_vibrating:
                    print("Starting motor vibration with Button 10")
                    self.ds.setLeftMotor(255)  # Max power to left motor
                    self.ds.setRightMotor(255)  # Max power to right motor
                    self.is_motor_vibrating = True
                else:
                    print("Stopping motor vibration with Button 10")
                    self.ds.setLeftMotor(0)  # Stop left motor
                    self.ds.setRightMotor(0)  # Stop right motor
                    self.is_motor_vibrating = False
            self.last_button_10_state = button_10_state

    def log_inputs(self):
        """Logs button and analog inputs."""
        print(f"Controller has {self.joystick.get_numbuttons()} buttons, {self.joystick.get_numaxes()} axes, {self.joystick.get_numhats()} hats (D-pad)")

        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False

                # Handle button presses and releases
                for button_idx in range(self.joystick.get_numbuttons()):
                    button_state = self.joystick.get_button(button_idx)
                    if button_state != self.last_button_states[button_idx]:
                        if button_state:
                            print(f"Button {button_idx} pressed")
                        else:
                            print(f"Button {button_idx} released")
                        self.last_button_states[button_idx] = button_state

                # Handle axis (analog stick and trigger) movements with threshold
                for axis_idx in range(self.joystick.get_numaxes()):
                    axis_value = self.joystick.get_axis(axis_idx)
                    if abs(axis_value - self.last_axis_states[axis_idx]) > self.AXIS_THRESHOLD:
                        print(f"Axis {axis_idx} moved to {axis_value:.3f}")
                        self.last_axis_states[axis_idx] = axis_value

                # Handle hat (D-pad) movements
                for hat_idx in range(self.joystick.get_numhats()):
                    hat_value = self.joystick.get_hat(hat_idx)
                    if hat_value != self.last_hat_states[hat_idx]:
                        print(f"Hat {hat_idx} moved to {hat_value}")
                        self.last_hat_states[hat_idx] = hat_value

            # Handle special features through pydualsense
            self.handle_dualsense_features()

    def quit(self):
        """Quits Pygame and pydualsense."""
        pygame.quit()
        self.ds.close()

# Run the tool
if __name__ == "__main__":
    controller = JoystickController()
    controller.check_sudo()              # Ensure script is run with sudo
    controller.check_vss_dbus_service()  # Ensure vss-dbus is not running
    controller.initialize_controller()   # Initialize joystick and pydualsense
    controller.log_inputs()              # Start logging inputs
    controller.quit()                    # Clean up when done
