#!/usr/bin/env python
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import asyncio
from vss_lib.kuksa import KUKSAClientVSS


async def signal_updater(client, signal_path, initial_value):
    """Continuously update the signal value."""
    value = initial_value
    try:
        for _ in range(5):  # Update 5 times for demonstration; adjust as needed
            await client.set_signal_value(signal_path, value)
            value += 1
            await asyncio.sleep(2)  # Wait before updating again
    except asyncio.CancelledError:
        print("Signal updater task was cancelled.")


async def main():
    client = KUKSAClientVSS()
    await client.connect()

    # Signal path to use for testing
    signal_path = 'Vehicle.Body.Windshield.Front.Wiping.System.TargetPosition'

    # Create concurrent tasks for updating and subscribing
    updater_task = asyncio.create_task(signal_updater(client, signal_path, 45))
    subscriber_task = asyncio.create_task(client.subscribe_to_signal(signal_path))

    try:
        # Run tasks concurrently
        await asyncio.gather(updater_task, subscriber_task)
    except asyncio.CancelledError:
        print("Main task was cancelled.")
    finally:
        await client.disconnect()

# Run the main function with a graceful shutdown on KeyboardInterrupt (CTRL-C)
try:
    asyncio.run(main())
except KeyboardInterrupt:
    print("Program interrupted by user. Exiting gracefully.")
